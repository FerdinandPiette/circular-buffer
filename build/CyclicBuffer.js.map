{"version":3,"sources":["CyclicBuffer.js"],"names":["InstanceMetaProgrammingInterface","get","object","property","abstractIndex","parseInt","Number","isInteger","realIndex","_beginIndex","capacity","_buffer","ModelMetaProgrammingInterface","construct","target","args","instance","Proxy","CyclicBuffer","constructor","size","_maxLength","Buffer","alloc","reset","_size","put","enumerable","from","length","writingIndex","copiedElement","copy","push","element","data","shift","getRawBuffer"],"mappings":"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","file":"CyclicBuffer.js","sourcesContent":["//import debugFactory from 'debug';\n//var debug = debugFactory('circular-buffer');\n\nvar InstanceMetaProgrammingInterface = {\n    get: function(object, property) {\n        if('string' === typeof property) {\n            var abstractIndex = parseInt(property);\n            if(Number.isInteger(abstractIndex)) {\n                let realIndex = (object._beginIndex + abstractIndex) % object.capacity();\n                return object._buffer[realIndex];\n            }\n        }\n        return object[property];\n    }\n};\n\nvar ModelMetaProgrammingInterface = {\n    construct: function(target, args) {\n        var instance = new target(...args);\n        return new Proxy(instance, InstanceMetaProgrammingInterface);\n    }\n};\n\nvar CyclicBuffer = class CyclicBuffer {\n    constructor(size) {\n        this._maxLength = size;\n        this._buffer = Buffer.alloc(this._maxLength);\n        this.reset();\n    }\n    reset() {\n        this._beginIndex = 0;\n        this._size = 0;\n    }\n    capacity() {\n        return this._maxLength;\n    }\n    size() {\n        return this._size;\n    }\n    put(enumerable) {\n        if(!(enumerable instanceof Buffer)) { enumerable = Buffer.from(enumerable); }\n        if(enumerable.length > this.capacity()) { return false; }\n\n        var writingIndex = (this._beginIndex + this.size()) % this.capacity();\n        if(this.capacity() < writingIndex + enumerable.length) {\n            // split & copy\n            let copiedElement = this.capacity() - writingIndex;\n            enumerable.copy(this._buffer, writingIndex, 0, copiedElement);\n            enumerable.copy(this._buffer, 0, copiedElement, enumerable.length)\n        } else {\n            // copy\n            enumerable.copy(this._buffer, writingIndex, 0, enumerable.length);\n        }\n        this._size += enumerable.length;\n        if(this._size > this.capacity()) {\n            this._beginIndex = (this._beginIndex + this._size - this.capacity()) % this.capacity();\n            this._size = this.capacity();\n        }\n        return true;\n    }\n    push(element) {\n        return this.put(Buffer.from([element]));\n    }\n    get(size) {\n        if(size > this.size()) { size = this.size(); }\n        var data = Buffer.alloc(size);\n        if(this._beginIndex + size > this.capacity()) {\n            // split & copy\n            let copiedElement = this.capacity() - this._beginIndex;\n            this._buffer.copy(data, 0, this._beginIndex, this.capacity());\n            this._buffer.copy(data, copiedElement, 0, size - copiedElement);\n        } else {\n            // copy\n            this._buffer.copy(data, 0, this._beginIndex, this._beginIndex + size);\n        }\n        this._size -= size;\n        this._beginIndex = (this._beginIndex + size) % this.capacity();\n        return data;\n    }\n    shift() {\n        return this.get(1)[0];\n    }\n    getRawBuffer() {\n        return this._buffer;\n    }\n};\n\nexport default new Proxy(CyclicBuffer, ModelMetaProgrammingInterface);\n"],"sourceRoot":"/run/media/ferdinand/543D677F4B28C1CB/recherche/2017_roomba/cyclic-buffer/src"}