{"version":3,"sources":["CircularBuffer.js"],"names":["debug","InstanceMetaProgrammingInterface","get","object","property","abstractIndex","parseInt","Number","isInteger","realIndex","_beginIndex","capacity","_buffer","ModelMetaProgrammingInterface","construct","target","args","instance","Proxy","CircularBuffer","constructor","size","_maxLength","_size","Buffer","alloc","put","enumerable","from","length","writingIndex","copiedElement","copy","push","element","data","pop"],"mappings":"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","file":"CircularBuffer.js","sourcesContent":["import debugFactory from 'debug';\nvar debug = debugFactory('circular-buffer');\n\nvar InstanceMetaProgrammingInterface = {\n    get: function(object, property) {\n        var abstractIndex = parseInt(property);\n        if(Number.isInteger(abstractIndex)) {\n            let realIndex = (object._beginIndex + abstractIndex) % object.capacity();\n            return object._buffer[realIndex];\n        }\n        return object[property];\n    }\n};\n\nvar ModelMetaProgrammingInterface = {\n    construct: function(target, args) {\n        var instance = new target(...args);\n        return new Proxy(instance, InstanceMetaProgrammingInterface);\n    }\n};\n\nvar CircularBuffer = class CircularBuffer {\n    constructor(size) {\n        this._maxLength = size;\n        this._beginIndex = 0;\n        this._size = 0;\n        this._buffer = Buffer.alloc(this._maxLength);\n    }\n    capacity() {\n        return this._maxLength;\n    }\n    size() {\n        return this._size;\n    }\n    put(enumerable) {\n        if(!(enumerable instanceof Buffer)) { enumerable = Buffer.from(enumerable); }\n        if(enumerable.length > this.capacity()) { return false; }\n        \n        var writingIndex = (this._beginIndex + this.size()) % this.capacity();\n        if(this.capacity() < writingIndex + enumerable.length) {\n            // split & copy\n            let copiedElement = this.capacity() - writingIndex;\n            enumerable.copy(this._buffer, writingIndex, 0, copiedElement);\n            enumerable.copy(this._buffer, 0, copiedElement, enumerable.length)\n        } else {\n            // copy\n            enumerable.copy(this._buffer, writingIndex, 0, enumerable.length);\n        }\n        this._size += enumerable.length;\n        if(this._size > this.capacity()) {\n            this._beginIndex = (this._beginIndex + this._size - this.capacity()) % this.capacity();\n            this._size = this.capacity();\n        }\n        return true;\n    }\n    push(element) {\n        this.put(Buffer.from([element]));\n    }\n    get(size) {\n        if(size > this.size()) { size = this.size(); }\n        var data = Buffer.alloc(size);\n        if(this._beginIndex + size > this.capacity()) {\n            // split & copy\n            let copiedElement = this.capacity() - this._beginIndex;\n            this._buffer.copy(data, 0, this._beginIndex, this.capacity());\n            this._buffer.copy(data, copiedElement, 0, size - copiedElement);\n        } else {\n            // copy\n            this._buffer.copy(data, 0, this._beginIndex, this._beginIndex + size);\n        }\n        this._size -= size;\n        this._beginIndex = (this._beginIndex + size) % this.capacity();\n        return data;\n    }\n    pop() {\n        return this.get(1);\n    }\n};\n\nexport default new Proxy(CircularBuffer, ModelMetaProgrammingInterface);\n"],"sourceRoot":"/run/media/ferdinand/543D677F4B28C1CB/recherche/2017_roomba/circular-buffer/src"}